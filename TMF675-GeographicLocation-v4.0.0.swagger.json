{
  "swagger": "2.0",
  "info": {
    "title": "API GeographicLocation",
    "description": "## TMF API Reference : TMF675 - Geographic Location\n### Release : 19.5\nA GeographicLocation is a pure-virtual super-class to the GeoJSON-aligned sub-types of Point (addresses and locations), MultiPoint, LineString (streets, highways and boundaries), MultiLineString and Polygon (countries, provinces, tracts of land). Use the @type attribute to specify which of these is being specified by the geometry attribute.",
    "version": "4.0.0"
  },
  "host": "serverRoot",
  "basePath": "/tmf-api/geographicLocation/v4/",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json;charset=utf-8"
  ],
  "produces": [
    "application/json;charset=utf-8"
  ],
  "tags": [
    {
      "name": "geographicLocation"
    },
    {
      "name": "notification listeners (client side)"
    },
    {
      "name": "events subscription"
    }
  ],
  "paths": {
    "/geographicLocation": {
      "get": {
        "operationId": "listGeographicLocation",
        "summary": "List or find GeographicLocation objects",
        "description": "This operation list or find GeographicLocation entities",
        "tags": [
          "geographicLocation"
        ],
        "parameters": [
          {
            "name": "fields",
            "description": "Comma-separated properties to be provided in response",
            "required": false,
            "in": "query",
            "type": "string"
          },
          {
            "name": "offset",
            "description": "Requested index for start of resources to be provided in response",
            "required": false,
            "in": "query",
            "type": "integer"
          },
          {
            "name": "limit",
            "description": "Requested number of resources to be provided in response",
            "required": false,
            "in": "query",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Result-Count": {
                "description": "Actual number of items returned in the response body",
                "type": "integer"
              },
              "X-Total-Count": {
                "description": "Total number of items matching criteria",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GeographicLocation"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "operationId": "createGeographicLocation",
        "summary": "Creates a GeographicLocation",
        "description": "This operation creates a GeographicLocation entity.",
        "tags": [
          "geographicLocation"
        ],
        "parameters": [
          {
            "name": "geographicLocation",
            "description": "The GeographicLocation to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GeographicLocation"
            },
            "in": "body"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/GeographicLocation"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/geographicLocation/{id}": {
      "get": {
        "operationId": "retrieveGeographicLocation",
        "summary": "Retrieves a GeographicLocation by ID",
        "description": "This operation retrieves a GeographicLocation entity. Attribute selection is enabled for all first level attributes.",
        "tags": [
          "geographicLocation"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Identifier of the GeographicLocation",
            "required": true,
            "type": "string",
            "in": "path"
          },
          {
            "name": "fields",
            "description": "Comma-separated properties to provide in response",
            "required": false,
            "type": "string",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GeographicLocation"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "patch": {
        "operationId": "patchGeographicLocation",
        "summary": "Updates partially a GeographicLocation",
        "description": "This operation updates partially a GeographicLocation entity.",
        "tags": [
          "geographicLocation"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Identifier of the GeographicLocation",
            "required": true,
            "type": "string",
            "in": "path"
          },
          {
            "name": "geographicLocation",
            "description": "The GeographicLocation to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GeographicLocation"
            },
            "in": "body"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/GeographicLocation"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteGeographicLocation",
        "summary": "Deletes a GeographicLocation",
        "description": "This operation deletes a GeographicLocation entity.",
        "tags": [
          "geographicLocation"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Identifier of the GeographicLocation",
            "required": true,
            "type": "string",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/hub": {
      "post": {
        "operationId": "registerListener",
        "summary": "Register a listener",
        "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "tags": [
          "events subscription"
        ],
        "parameters": [
          {
            "name": "data",
            "schema": {
              "$ref": "#/definitions/EventSubscriptionInput"
            },
            "required": true,
            "in": "body",
            "description": "Data containing the callback endpoint to deliver the information"
          }
        ],
        "responses": {
          "201": {
            "description": "Subscribed",
            "schema": {
              "$ref": "#/definitions/EventSubscription"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/hub/{id}": {
      "delete": {
        "operationId": "unregisterListener",
        "summary": "Unregister a listener",
        "description": "Resets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "tags": [
          "events subscription"
        ],
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "required": true,
            "in": "path",
            "description": "The id of the registered listener"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/listener/geographicLocationCreateEvent": {
      "post": {
        "operationId": "listenToGeographicLocationCreateEvent",
        "summary": "Client listener for entity GeographicLocationCreateEvent",
        "description": "Example of a client listener for receiving the notification GeographicLocationCreateEvent",
        "tags": [
          "notification listeners (client side)"
        ],
        "parameters": [
          {
            "name": "data",
            "required": true,
            "in": "body",
            "description": "The event data",
            "schema": {
              "$ref": "#/definitions/GeographicLocationCreateEvent"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Notified",
            "schema": {
              "$ref": "#/definitions/EventSubscription"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/listener/geographicLocationAttributeValueChangeEvent": {
      "post": {
        "operationId": "listenToGeographicLocationAttributeValueChangeEvent",
        "summary": "Client listener for entity GeographicLocationAttributeValueChangeEvent",
        "description": "Example of a client listener for receiving the notification GeographicLocationAttributeValueChangeEvent",
        "tags": [
          "notification listeners (client side)"
        ],
        "parameters": [
          {
            "name": "data",
            "required": true,
            "in": "body",
            "description": "The event data",
            "schema": {
              "$ref": "#/definitions/GeographicLocationAttributeValueChangeEvent"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Notified",
            "schema": {
              "$ref": "#/definitions/EventSubscription"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/listener/geographicLocationDeleteEvent": {
      "post": {
        "operationId": "listenToGeographicLocationDeleteEvent",
        "summary": "Client listener for entity GeographicLocationDeleteEvent",
        "description": "Example of a client listener for receiving the notification GeographicLocationDeleteEvent",
        "tags": [
          "notification listeners (client side)"
        ],
        "parameters": [
          {
            "name": "data",
            "required": true,
            "in": "body",
            "description": "The event data",
            "schema": {
              "$ref": "#/definitions/GeographicLocationDeleteEvent"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Notified",
            "schema": {
              "$ref": "#/definitions/EventSubscription"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "GeographicLocation": {
      "type": "object",
      "description": "A GeographicLocation is a pure-virtual super-class to the GeoJSON-aligned geometries of Point (addresses and locations), MultiPoint, LineString (streets, highways and boundaries), MultiLineString and Polygon (countries, provinces, tracts of land). Use the @type attribute to specify which of these is being specified by the geometry attribute.",
      "discriminator": "@type",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the geographic location"
        },
        "href": {
          "type": "string",
          "description": "An URI used to access to the geographic location resource"
        },
        "name": {
          "type": "string",
          "description": "A user-friendly name for the place, such as [Paris Store], [London Store], [Main Home]"
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "The name of the GeoJSON structure used in the geometry attribute"
        },
        "geoJson": {
          "description": "GeoJson object according to https://tools.ietf.org/html/rfc7946",
          "$ref": "#/definitions/GeoJsonType"
        }
      },
      "required": [
        "@type"
      ]
    },
    "EventSubscription": {
      "type": "object",
      "description": "Sets the communication endpoint address the service instance must use to deliver notification information",
      "required": [
        "id",
        "callback"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Id of the listener"
        },
        "callback": {
          "type": "string",
          "description": "The callback being registered."
        },
        "query": {
          "type": "string",
          "description": "additional data to be passed"
        }
      }
    },
    "EventSubscriptionInput": {
      "type": "object",
      "description": "Sets the communication endpoint address the service instance must use to deliver notification information",
      "required": [
        "callback"
      ],
      "properties": {
        "callback": {
          "type": "string",
          "description": "The callback being registered."
        },
        "query": {
          "type": "string",
          "description": "additional data to be passed"
        }
      }
    },
    "GeographicLocationCreateEvent": {
      "type": "object",
      "description": "The notification data structure",
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifier of the Process flow"
        },
        "href": {
          "type": "string",
          "description": "Reference of the ProcessFlow"
        },
        "eventId": {
          "type": "string",
          "description": "The identifier of the notification."
        },
        "eventTime": {
          "type": "string",
          "format": "date-time",
          "description": "Time of the event occurrence."
        },
        "eventType": {
          "type": "string",
          "description": "The type of the notification."
        },
        "correlationId": {
          "type": "string",
          "description": "The correlation id for this event."
        },
        "domain": {
          "type": "string",
          "description": "The domain of the event."
        },
        "title": {
          "type": "string",
          "description": "The title of the event."
        },
        "description": {
          "type": "string",
          "description": "An explnatory of the event."
        },
        "priority": {
          "type": "string",
          "description": "A priority."
        },
        "timeOccurred": {
          "type": "string",
          "format": "date-time",
          "description": "The time the event occured."
        },
        "event": {
          "description": "The event payload linked to the involved resource object",
          "$ref": "#/definitions/GeographicLocationCreateEventPayload"
        }
      }
    },
    "GeographicLocationCreateEventPayload": {
      "type": "object",
      "description": "The event data structure",
      "properties": {
        "geographicLocation": {
          "description": "The involved resource data for the event",
          "$ref": "#/definitions/GeographicLocation"
        }
      }
    },
    "GeographicLocationAttributeValueChangeEvent": {
      "type": "object",
      "description": "The notification data structure",
      "properties": {
        "eventId": {
          "type": "string",
          "description": "The identifier of the notification."
        },
        "eventTime": {
          "type": "string",
          "format": "date-time",
          "description": "Time of the event occurrence."
        },
        "eventType": {
          "type": "string",
          "description": "The type of the notification."
        },
        "correlationId": {
          "type": "string",
          "description": "The correlation id for this event."
        },
        "domain": {
          "type": "string",
          "description": "The domain of the event."
        },
        "title": {
          "type": "string",
          "description": "The title of the event."
        },
        "description": {
          "type": "string",
          "description": "An explanatory of the event."
        },
        "priority": {
          "type": "string",
          "description": "A priority."
        },
        "timeOccurred": {
          "type": "string",
          "format": "date-time",
          "description": "The time the event occurred."
        },
        "fieldPath": {
          "type": "string",
          "description": "The path identifying the object field concerned by this notification."
        },
        "event": {
          "description": "The event payload linked to the involved resource object",
          "$ref": "#/definitions/GeographicLocationAttributeValueChangeEventPayload"
        }
      }
    },
    "GeographicLocationAttributeValueChangeEventPayload": {
      "type": "object",
      "description": "The event data structure",
      "properties": {
        "geographicLocation": {
          "description": "The involved resource data for the event",
          "$ref": "#/definitions/GeographicLocation"
        }
      }
    },
    "GeographicLocationDeleteEvent": {
      "type": "object",
      "description": "The notification data structure",
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifier of the Process flow"
        },
        "href": {
          "type": "string",
          "description": "Reference of the ProcessFlow"
        },
        "eventId": {
          "type": "string",
          "description": "The identifier of the notification."
        },
        "eventTime": {
          "type": "string",
          "format": "date-time",
          "description": "Time of the event occurrence."
        },
        "eventType": {
          "type": "string",
          "description": "The type of the notification."
        },
        "correlationId": {
          "type": "string",
          "description": "The correlation id for this event."
        },
        "domain": {
          "type": "string",
          "description": "The domain of the event."
        },
        "title": {
          "type": "string",
          "description": "The title of the event."
        },
        "description": {
          "type": "string",
          "description": "An explnatory of the event."
        },
        "priority": {
          "type": "string",
          "description": "A priority."
        },
        "timeOccurred": {
          "type": "string",
          "format": "date-time",
          "description": "The time the event occured."
        },
        "event": {
          "description": "The event payload linked to the involved resource object",
          "$ref": "#/definitions/GeographicLocationDeleteEventPayload"
        }
      }
    },
    "GeographicLocationDeleteEventPayload": {
      "type": "object",
      "description": "The event data structure",
      "properties": {
        "geographicLocation": {
          "description": "The involved resource data for the event",
          "$ref": "#/definitions/GeographicLocation"
        }
      }
    },
    "GeoJsonType": {
      "type": "object",
      "description": "GeoJson Base Object as defined in https://tools.ietf.org/html/rfc7946",
      "discriminator": "type",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of the GeoJson object"
        },
        "bbox": {
          "type": "array",
          "description": "A bounding box array that contains the geometry. The axes order follows the axes order of the geometry",
          "items": {
            "type": "number"
          }
        }
      }
    },
    "GeoJsonPosition": {
      "description": "A GeoJson position",
      "type": "array",
      "items": {
        "type": "number",
        "minItems": 2,
        "maxItems": 2
      }
    },
    "GeoJsonPositionArray": {
      "description": "A GeoJson position array",
      "type": "array",
      "items": {
        "$ref": "#/definitions/GeoJsonPosition"
      }
    },
    "GeoJsonGeometryType": {
      "description": "Base for all geometry types: Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/GeoJsonType"
        }
      ]
    },
    "Feature": {
      "description": "A GeoJson Feature",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/GeoJsonType"
        },
        {
          "properties": {
            "geometry": {
              "$ref": "#/definitions/GeoJsonGeometryType",
              "description": "A GeoJson geometry"
            },
            "properties": {
              "type": "object",
              "description": "properties of the feature"
            }
          }
        }
      ]
    },
    "FeatureCollection": {
      "type": "object",
      "description": "A GeoJson FeatureCollection",
      "allOf": [
        {
          "$ref": "#/definitions/GeoJsonType"
        },
        {
          "properties": {
            "features": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Feature"
              }
            }
          }
        }
      ]
    },
    "Point": {
      "type": "object",
      "description": "A GeoJson Point",
      "allOf": [
        {
          "$ref": "#/definitions/GeoJsonGeometryType"
        },
        {
          "properties": {
            "coordinates": {
              "$ref": "#/definitions/GeoJsonPosition"
            }
          },
          "required": [
            "coordinates"
          ]
        }
      ]
    },
    "MultiPoint": {
      "type": "object",
      "description": "A GeoJson MultiPoint",
      "allOf": [
        {
          "$ref": "#/definitions/GeoJsonGeometryType"
        },
        {
          "properties": {
            "coordinates": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GeoJsonPosition"
              }
            }
          }
        }
      ]
    },
    "LineString": {
      "type": "object",
      "description": "A GeoJson LineString",
      "allOf": [
        {
          "$ref": "#/definitions/GeoJsonGeometryType"
        },
        {
          "properties": {
            "coordinates": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GeoJsonPosition"
              }
            }
          }
        }
      ]
    },
    "MultiLineString": {
      "type": "object",
      "description": "A GeoJson MultiLineString",
      "allOf": [
        {
          "$ref": "#/definitions/GeoJsonGeometryType"
        },
        {
          "properties": {
            "coordinates": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GeoJsonPositionArray"
              }
            }
          }
        }
      ]
    },
    "Polygon": {
      "type": "object",
      "description": "A GeoJson Polygon",
      "allOf": [
        {
          "$ref": "#/definitions/GeoJsonGeometryType"
        },
        {
          "properties": {
            "coordinates": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GeoJsonPositionArray"
              }
            }
          }
        }
      ]
    },
    "MultiPolygon": {
      "type": "object",
      "description": "A GeoJson ",
      "allOf": [
        {
          "$ref": "#/definitions/GeoJsonGeometryType"
        },
        {
          "properties": {
            "coordinates": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeoJsonPositionArray"
                }
              }
            }
          }
        }
      ]
    },
    "GeometryCollection": {
      "type": "object",
      "description": "A GeoJson ",
      "allOf": [
        {
          "$ref": "#/definitions/GeoJsonGeometryType"
        },
        {
          "properties": {
            "geometries": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GeoJsonGeometryType"
              }
            }
          }
        }
      ]
    },
    "Error": {
      "description": "Used when an API throws an Error, typically with a HTTP error response-code (3xx, 4xx, 5xx)",
      "type": "object",
      "required": [
        "code",
        "reason"
      ],
      "properties": {
        "code": {
          "type": "string",
          "description": "Application relevant detail, defined in the API or a common list."
        },
        "reason": {
          "type": "string",
          "description": "Explanation of the reason for the error which can be shown to a client user."
        },
        "message": {
          "type": "string",
          "description": "More details and corrective actions related to the error which can be shown to a client user."
        },
        "status": {
          "type": "string",
          "description": "HTTP Error code extension"
        },
        "referenceError": {
          "type": "string",
          "format": "uri",
          "description": "URI of documentation describing the error."
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class."
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name."
        }
      }
    }
  }
}